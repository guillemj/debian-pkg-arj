#DPATCHLEVEL=1
--- arj-3.10.19.orig/environ.c	2004-02-20 14:18:52.000000000 +0100
+++ arj-3.10.19/environ.c	2004-03-12 13:53:44.000000000 +0100
@@ -54,20 +54,10 @@
  #include <utime.h>
  #include <sys/time.h>                  /* LIBC high-resolution timing */
  #include <sys/resource.h>              /* Priority control */
- /* For Linux-specific IOCTL. Originally, there was a name clash on
-    "struct statfs" between headers descending from "linux/fs.h" and
-    "sys/statfs.h", so "sys/statfs.h" was left out.
-    As of 09/02/2004, the current glibc seems to have a workaround, and
-    "sys/statfs.h" is becoming mandatory for the statfs() prototype.
-    Two ways are available to fix this while retaining compatibility,
-    by now the less obscure way will be exploited. */
  #if defined(linux)
   #include <sys/ioctl.h>
-  #include <linux/fs.h>
-  /* #define FIGETBSZ _IO(0x00, 2) */  /* Another way (HACK) */
-  #if defined(__GLIBC__)&&defined(__GLIBC_MINOR__)&&(__GLIBC__>2||(__GLIBC__==2&&__GLIBC_MINOR__>=3))
-   #include <sys/statfs.h>
-  #endif
+  #include <sys/statfs.h>
+  #include <sys/statvfs.h>
  #elif defined(__FreeBSD__)||defined(__NetBSD__)
   #include <sys/param.h>
   #include <sys/mount.h>
@@ -3115,13 +3105,12 @@
    return(bps*spclu);
  #elif TARGET==UNIX
   #ifdef linux
-   int handle, rc, rci;
+   struct statvfs vfs;
 
-   if((handle=open(name, O_RDONLY))==-1)
+   if(statvfs(name, &vfs)==-1)
     return(512);
-   rci=ioctl(handle, FIGETBSZ, &rc);
-   close(handle);
-   return(rci?512:rc);
+   else
+    return(vfs.f_bsize);
   #else
    return(512);
   #endif
